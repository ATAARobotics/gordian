{"name":"Gordian","tagline":"Alberta Tech Alliance's Scripting Language","body":"# GORDIAN #\r\n-----------\r\n\r\nThis is Gordian. It is a scripting language written in Java to run programs based solely on their text.\r\nIt is interpreted, and provides no guarantees. A lot of errors are caught at runtime, which might make your job harder. As a bonus however, Gordian is extremely lightweight, flexible and can be hacked very easily. (in a good way)\r\n\r\nIt isn't meant to solve any problem that another language couldn't. It's purpose is to be run on robots (see [FRC](https://en.wikipedia.org/wiki/FIRST_Robotics_Competition)). Since implementing another language would require a lot of dependencies that I just can't do on the platform, I wanted to make the language portable and by itself using only parsing.\r\n\r\nAnd the platform it is run on is Java ME with [squawk](http://en.wikipedia.org/wiki/Squawk_virtual_machine).\r\n\r\n# Basics\r\nGordian separates instructions using line breaks (\\n) and ';'. They are functionally equivalent. For this reason, you can use this notation:\r\n\r\n    def foo(x)\r\n        # instructions\r\n    end\r\n\r\nOr this notation:\r\n\r\n    def foo(x); # instructions; end\r\n    \r\nThey are the same to Gordian.\r\n\r\n## Calling from Java\r\nUse `Gordian.run` to run your script in Java. For more access to variables and elements, create a `Scope` object in the same way as `Gordian.run`, and call `Scope.run(String)` to run your script. The `Scope` object has access to some useful internals of the language.\r\n\r\n# Datatypes and Operators\r\n\r\n### Numbers are int/double variants - in Java they are GordianNumber\r\n    x = 2.0 ### => 2\r\n    x = 3.42 ### => 3.42\r\n    \r\n### Math works in floating point\r\n    x = 12 / 23 ### => 0.5217391304347826\r\n\r\n### But results are inferred type\r\n    x = 2 / 1 ### => 2\r\n\r\n### Enforce precedence by steps (Not parentheses!)\r\n    x = 3 / 2 ### => 1.5\r\n    x = x * 3 ### => 4.5\r\n    x = x + 2 ### => 6.5\r\n    \r\n### Modulus > Multiplication > Division > Addition > Subtraction > Right > Left\r\n    x = 3 * 2 * 1 ### => (3 * (2 * 1))\r\n    x = 1 / 2 / 3 ### => (1 / (2 / 3))\r\n    x = 1 * 2 / 3 + 4 - 5 ### => (((1 * (2 / 3)) + 4) - 5)\r\n\r\n### Incrementing and decrementing\r\n    x++ ### When x doesn't exist (or isn't a number), starts at 0 (x++ is 1)\r\n    x-- ### When x doesn't exist (or isn't a number), starts at 0 (x-- is -1)\r\n    \r\n### Declarations and increments are both considered values as well\r\n    foo(x++) ### Is correct\r\n    foo(x = x + 1) ### Is also correct\r\n\r\n# Booleans\r\n    x = true\r\n    x = false\r\n    \r\nTypes are not bound to variables!\r\n\r\n### Reverse booleans with !\r\n    x = !true ### => false\r\n\r\n### Equality (uses Object.equals() - strings too!)\r\n    x = h == h ### => true\r\n\r\n### Inequality\r\n    x = h != g ### => true\r\n\r\n### Comparisons\r\n    x = 3 > 2 ### => true\r\n    x = 4.5 < 2 ### => false\r\n    x = 1 >= 1 ### => true\r\n    x = 4 <= 10 ### => false\r\n    \r\n### Boolean operators\r\n    x = true && false ### => false\r\n    x = true || false ### => true\r\n\r\n### Strings are created in quotes\r\n    x = \"Hello World\" ### => Hello World\r\n    \r\n### Concatenate strings using `+`\r\n    x = \"Hello \" + World\r\n\r\n### Can also create strings without quotes, but removes spaces\r\n    x = Hello World ### => HelloWorld\r\n\r\n# Variables\r\n\r\n### Create empty variables using `make`\r\n    make varName ### => Empty string value\r\n\r\n### Remove value using `del`\r\n    del x ### => Var no longer exists\r\n    \r\n### Type is not enforced\r\n    x = true\r\n    x = 3\r\n    x = Hello\r\n\r\n# Control flow\r\n    x = 0\r\n\r\n    if(x >= 1)\r\n        x++\r\n    else if(x < 0)\r\n        x--\r\n    else\r\n        x = 12\r\n    end\r\n\r\n### For runs x amount of times\r\n    for(x)\r\n        x++\r\n    end\r\n\r\n    while(x++ < 100)\r\n        ### Do things\r\n    end\r\n\r\n### Create methods with def\r\n    def printMore(x)\r\n        print(x + 3)\r\n    end\r\n    \r\n### Returning methods use a `return x`\r\n    def get(x)\r\n        return x + 1\r\n    end\r\n\r\n### Everything has a scope\r\n    def foo()\r\n        def bar()\r\n        end\r\n        \r\n        ### Can call bar!\r\n    end\r\n    \r\n    ### Can't call bar!\r\n\r\n# Language quirks\r\n\r\n- Variable shadowing is not supported\r\n- Parentheses are not supported for any operation\r\n- Using the `x = val` notation as a value is equivalent to using `val`, and calling `x = val`. It has nothing to do with the method's variables (like python).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}